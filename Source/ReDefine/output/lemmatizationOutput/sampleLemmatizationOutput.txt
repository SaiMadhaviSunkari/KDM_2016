no title a large-scale empirical study on Software Reuse in Mobile Apps Israel J. Mojica , McAfee Bram Adams , École Polytechnique de Montréal Meiyappan Nagappan , Queen 's University Steffen Dienst , University of Leipzig Thorsten Berger , University of Waterloo Ahmed E. Hassan , Queen 's University / / a study of hundred of thousand of Android app find substantial software reuse , indicate that while these app bene t from increase productivity , they be also more dependent on the quality of the app and library that they reuse . / / mobile app be application developed to run on device such as smartphone or tablet . user typically access they through online app store , such as Google Play , BlackBerry World , the Apple App Store , and the Windows Phone marketplace . the number of available product be staggering , with Google Play alone offer 700,000 app at the end of 2012.1 the huge market -lrb- billion of download app , with project revenue of more than us$ 22 billion by 2016 -rrb- , combine with standardized app store and feature-packed mobile platform such as android or iOS , have attract thousand of developer .2 a survey of 352 app developer show that • 40 percent develop app outside of they main job , • 21 percent work on app part time , and • 39 percent make they living through app development .3 many of these developer be highly educate -lrb- for instance , 33 percent have some graduate school experience -rrb- , but they schooling be not necessarily in software engineering . thus , the survey conclude that app developer `` often lack expertise in all the aspect of app development need to be successful . '' although half of those survey earn less than $ 15,000 per year , the average income be still $ 45,000 . to understand how , despite a lack of formal training , app developer continue to succeed , we have previously study the use of proven software engineering practice in 4,323 free -lrb- as in `` no cost '' -rrb- android app across fi ve category .4 in particular , we find that the practice of software reuse -lrb- `` the use of exist software or software knowledge to construct new software `` 5,6 -rrb- be high among app developer -lrb- compare to `` regular '' open source project -rrb- , with 61 percent of the class on average appear in two or more app through inheritance , library , or framework . surprisingly , we find 48 cluster of 217 app that be identical , often consist of fake app cobble together by unscrupulous app developer from exist app -lrb- http://about-threat . trendmicro.com/us/webattack/72/ fake + apps + affect + android+os + user -rrb- . we also find that some of these developer • replace advertisement library to steal revenue from the original app developer ,7 • add malicious function to steal information from the app user -lrb- for example , contact list number -rrb- , and • automatically charge app user without they knowledge -lrb- for example , by send text message to premium number -rrb- .8 to analyze whether these phenomenon be just specifi c to the app in we previous study or to mobile app in general , we extend we study to more than 200,000 free android app across all 30 app category from Google Play . Study Design Software reuse5 ,6 have be analyze since 1968 , when Douglas McIlroy propose to mass produce software with the help of reusable component .9 various type of software reuse exist , such as inheritance , code , and framework reuse , each with its own advantage and disadvantage .10 here , we study inheritance and code reuse , as well as the special case of framework reuse where one app reuse another entire app . to analyze these different form of reuse , we generate a signature for each Java class of a mobile app , then track the signature across all app . crawl Google Play in 2011 , two of the author crawl the offi cial Google Play app store to obtain two dataset use in this study :11 the binary android app in the offi cial android package -lrb- apk -rrb- format and the app ' metadata -lrb- that be , spe-cifi c information for each app , such as the app name , app package name , app category , version number , developer name , and developer email address -rrb- . we study only the free -lrb- to download -rrb- app because we require access to the source code or bytecode , which be not legally possible for pay app without actu - ally pay . however , because the android platform have the largest user base ,12 free app represent 75 percent of all Google Play app -lrb- www.appbrain.com/stats/ free-and-paid-android-application -rrb- , and free app be download more often -lrb- www.gartner.com/newsroom/ id/2153215 -rrb- , we believe that we case study space be broad and representative enough to draw valid conclusion . Google Play consider 27 different app category and eight game subcategory . the crawl do not fetch two category -lrb- live wallpaper and widget -rrb- , and we find two identically name subcategory under Games . this leave we with 208,601 app in 30 category , as the second column of Table 1 show . Class Signature Extraction we use the Software Bertillonage technique , which compare the interface of Java class , to analyze the mobile app for software reuse .13 we choose this technique instead of more traditional code clone detection because the Google Play app store -lrb- like any app store -rrb- do not provide access to the source code , only the by-tecode . similarly , hashing-based technique on byte-code would not work because developer could change whitespace , comment , the order of method , or even part of the implementation of method . instead , bertil-lonage only analyze the interface of class -lrb- that be , the class name and method prototype -rrb- , which can readily be extract from bytecode . we use fi ve step to obtain we analysis datum . we generate a signature for each Java class of a mobile app , then track the signature across all app . TA b l e 1 characteristic and inheritance result of the Android app under analysis . category total no . of distinct app total no . of class mean no of . class median no . of class percent of base class java.lang . object percent of base class platform percent of base class domain-specific book and Reference 12,769 1,048,042 82.08 24 44.95 25.96 29.10 business 8,490 1,572,701 185.24 66 46.61 17.98 35.41 Comics 5,255 123,669 23.53 11 41.73 38.16 20.11 communication 4,630 537,257 116.04 23 46.67 21.69 31.65 Education 8,100 1,090,928 134.68 34 42.93 18.50 38.57 Entertainment 22,674 2,262,595 99.79 27 44.77 21.89 33.34 Finance 3,958 438,699 110.84 31 40.27 19.20 40.53 Games - arcade and action 10,366 1,078,008 103.99 34 47.84 15.91 36.25 Games - brain and puzzle 10,355 1,262,509 121.92 48 40.36 15.96 43.68 Games - Cards and casino 2,052 129,719 63.22 25 48.85 21.75 29.41 games-casual 7,486 906,228 121.06 35 45.08 15.37 39.55 games-racing 1,679 138,806 82.67 72 54.96 21.07 23.97 Games-Sports 2,956 242,722 82.11 34 53.26 21.00 25.74 Health and fitness 3,899 397,618 101.98 30 42.87 20.80 36.33 library and demo 2,706 150,123 55.48 9 44.73 24.90 30.36 lifestyle 11,314 1,480,139 130.82 33 43.74 18.51 37.74 Media and video 6,361 394,354 62.00 25 42.84 27.37 29.79 medical 2,173 184,059 84.7 13 39.86 18.89 41.26 music and audio 14,232 5,681,171 399.18 232 49.20 14.09 36.72 News and magazine 6,732 991,153 147.23 56 48.53 21.59 29.88 personalization 10,566 361,653 34.23 12 43.47 30.14 26.39 Photography 5,738 264,753 46.14 9 48.14 29.77 22.09 Productivity 4,486 509,583 113.59 27 42.86 19.62 37.51 Shopping 3,642 393,314 107.99 34 42.11 19.49 38.41 Social 6,408 1,013,686 158.19 38 45.82 20.22 33.95 Sports 7,772 1,566,915 201.61 42 45.12 19.22 35.66 tool 12,129 848,311 69.94 15 40.60 20.72 38.68 Transportation 1,966 182,911 93.04 25 41.67 18.22 40.11 travel and local 6,629 1,089,421 164.34 51 40.94 16.93 42.13 weather 1,078 112,550 104.41 22 44.94 21.85 33.21 all category 208,601 26,453,597 126.81 29 45.47 18.75 35.78 1 . extract bytecode from the apk . we use the dex2jar tool -lrb- http://code.google.com/p/dex2jar -rrb- to extract the jar -lrb- Java Archive -rrb- file from the apk . 2 . extract class and method . for each class in the jar file , we extract its fully qualify name -lrb- name of the class along with the package that it be in -rrb- , its base class -lrb- if applicable -rrb- , and the name and parameter type of its method use the Apache BCEL -lrb- Byte Code Engineering Library ; http://commons.apache.org/bcel -rrb- . we store this datum in a database . 3 . remove obfuscation . different tool can obfuscate Android app source code -lrb- for example , ProGuard -rrb- . obfuscate class have name consist of one or two letter -lrb- for example , `` ab '' -rrb- or three to five identical initial letter -lrb- for example , `` aaaa '' -rrb- , so we decide to omit these particular class . furthermore , we also omit the class call r -lrb- Resource -rrb- because it be compile automatically from a xml file describe the GUI . 4 . generate class signature . a bertillonage signature consist of the fully qualify class name follow by a alphabetical list of the method prototype . method that implement generic interface be remove because exist tool can not process such interface correctly . originally , Julius Davies and he colleague do not sort the method .13 however , we decide to change this to deal with accidental method reordering . we store the set of generate class signature in a database for further analysis . 5 . compare signature across jar archive . textual comparison of the signature let we match class across jar archive , and hence , app . because android app include a app 's bytecode along with all of the library it use in the APK , we analysis automatically consider both source and library code . the third , fourth , and fifth column in Table 1 show the total , mean , and median number of class signature for each category , minus obfuscate class . Case Study we use the extract signature to analyze inheritance and code reuse , as well as framework reuse of whole app . Inheritance Reuse in Java , inheritance be indicate by the extend keyword-for example , public class com.google.ads.ad-view extend android.widget.relativelayout . here , the AdView class reuse via inheritance the RelativeLayout base class that be part of the android.widget package . use the package name of the base class , we can identify if the class be part of the Android API platform -lrb- http://developer . android.com/reference/packages.html -rrb- or be a domain-specific class . platform base class also comprise standard Java class such as java.lang.string or java.net.url . the last three column of Table 1 show the percentage of class in each category that inherit from the platform and domain-specific base class . because all class in Java inherit at least from the java.lang.object class , we separate out all those that inherit only from the Object class . on average , 54.53 percent of the class in each category inherit from a base class , while only 18.75 percent of all class inherit from the android platform base class . in only three out of the 30 category -lrb- Comics , personalization , and Photography -rrb- , the class in the mobile app inherit more from the platform base class than from domain-specific -lrb- nonplatform -rrb- base class . the activity class in the Android API be the most popular , with approximately 8.4 percent of the -lrb- non-java . lang.object -rrb- class signature inherit from it . Table 2 show how eight out of the top 10 base class be part of the Android API . the TwitterResponseImpl class in the twitter4j package be from the twitter4j-core library -lrb- http://twitter4j.org -rrb- , and the SerializerBase class in the org.codehaus.jackson.map.ser package be from the jack-son mapper library -lrb- http://jackson.codehaus.org -rrb- . because it be no surprise that mobile app inherit from platform class -lrb- which developer therefore reuse -rrb- such as activity , we also examine the top 10 inherit domain-specific base class . the rank of this group , in the global ranking of base class , range from 7 to 26 . among these top 10 , we find class to • interface with twitter ; • handle JSON datum ; • interpret the Kawa scheme implementation -lrb- www . gnu.org/software/kawa/index.html -rrb- use by Android App inventor-an application to create app by drag and drop visual component -lrb- http : / / appinventor.mit.edu -rrb- ; • interpret JavaScript , html5 , and css3 -lrb- use by the PhoneGap framework to create android app use web programming language -lsb- http://phonegap . com / -rsb- and by the Rhino project to integrate Java-Script in Android app -lsb- https://developer.mozilla . org/en-us/docs / rhino -rsb- -rrb- ; and • display advertisement -lrb- provide by the Adwhirl library ; http://code.google.com/p/adwhirl -rrb- . if we compare these finding to prior research on reuse in four open source Java project ,14 we find that roughly 54.53 percent of the class in a mobile app inherit from a base class -lrb- other than java.lang.object -rrb- , compare to between 29 and 36 percent on open source Java project . although the Java case study consider only four system compare to the many thousand in we analysis , these finding seem to suggest that mobile app developer make more thorough use of inheritance-based reuse . Code Reuse to understand the degree of code reuse of class and which class be be reuse across mobile app , we measure the proportion of class in each category that be unique to one app . we take this proportion 's complement to obtain the proportion of class signature reuse -lrb- pcsr -rrb- of a category : pcsr 1 total number of unique class signature total number of class signature = − . a high pcsr value indicate that the reuse of class signature be high in that category . Figure 1 show the pcsr for each category . overall , 84.23 percent of class signature be reuse across all category . six out of the 30 category be above the overall pcsr : Games-Brain and puzzle , 89.84 percent ; Sports , 88.65 percent ; Games-Casual , 87.78 percent ; Games-Arcade and action , 86.72 percent ; Games-Racing , 84.62 percent ; and Music and audio , 84.46 percent . the Comics category have the lowest pcsr , with only 62.72 percent , which be similar to Games-Cards and casino , with a pcsr of 63.59 percent . the high percentage of code reuse across app indicate that very few class be unique to a mobile app . in other word , we again find that mobile app developer value reuse . framework reuse of whole app in some case of framework reuse , all class of a app be reuse by another app , or multiple app have identical set of class . such case basically correspond to extreme case of the general definition of framework reuse , where it be say that a set of app be reuse a common framework of class if two or more mobile app have a common set of signature -lrb- for example , for datum persistence or for look-and-feel purpose -rrb- . Guido Cardino and he colleague show that framework reuse can increase general productivity , among other advantage ,15 but the special case that we consider here correspond to the less recommended practice describe in the introduction . for this analysis , we introduce the local reuse of a mobile app , denote as local -lrb- a , b -rrb- . for a pair of mobile app a and b , local reuse be the proportion of class signature find in a that also occur in b : ∩ = local a b s a s b be a s x x -lrb- , -rrb- -lrb- -rrb- -lrb- -rrb- -lrb- -rrb- , -lrb- -rrb- be set of signature in app . a high value of local reuse mean that a high number of class signature be reuse in another app . note that we only consider pair of app that both have local reuse = 1 , which mean that both mobile app have the same number of class and each class signature in one mobile app be identical to a signature in the other mobile app . TA B l e 2 top 10 base class -lrb- other than java.lang.object -rrb- across all category of mobile app with the highest percentage of inheritance . Class name percentage of class inherit from the class android.app.activity 8.40 android.content.broadcastreceiver 1.66 java.lang.enum 1.57 java.lang.exception 1.40 android.widget.relativelayout 1.35 android.os.asynctask 1.13 twitter4j.twitterresponseimpl 1.03 java.lang.runtimeexception 0.84 android.app.listactivity 0.76 org.codehaus.jackson.map.ser.serializerbase 0.74 we find that 1,811 set of mobile app have the same set of class signature , comprise 17,109 individual mobile app -lrb- 8.2 percent of all study mobile app -rrb- , and 30 out of the 1,811 set comprise app from different category . the number of class -lrb- app size -rrb- across the 1,811 different set of app where local reuse = 1 be true vary from one to 1,903 class . most cluster contain one -lrb- 81 cluster -rrb- , eight -lrb- 63 cluster -rrb- , or 25 -lrb- 33 cluster -rrb- reuse class , with a median of 61 reuse class . the top three largest cluster consist of 473 app with one reuse class , 339 app with eight reuse class , and 334 app with 20 reuse class . the median number of app across cluster be three app . the largest cluster be a set of 473 app , each of which contain one class . Class isest.nestmi.IsestApp be reuse by 468 app in the Games-Arcade and action category , four app in the Games-Brain and puzzle category , and one app in the Games-Cards and casino category . three different app developer register these app , but they name be similar-for instance , Vital-Game -lrb- 200 app -rrb- , Vital-Game . com -lrb- 88 app -rrb- , and VitalGame -lrb- 185 app -rrb- . furthermore , the app developer ' contact website 100 95 90 85 80 75 70 65 60 55 50 45 40 35 30 25 20 15 10 5 0 pe rc en ta ge Bo ok be Bu si ne ss Co m ic s Co m m un ic at io n Ed uc at io n en te rt be nm en t fi na nc e ar can de a nd a ct io n ga m e br be n a d pu zz le g be e can rd s a d can si no g be e ca su al g be e ra ci ng g be e sp or t g be e he al th Li br ar ie be Li fe st yl e m ed ia m ed ic al m we ic a nd a ud io ne w be a d m ag az in e Pe r on al iz at io n ph ot og ra ph y pr od uc tiv ity sh op so ci al sp or t to ol s tr a sp or ta tio n tr av el w ea th er Al l category figure 1 . proportion of class signature reuse per category . a high value indicate that very few class of the app in the particular category be unique to a single app . when all category be take together , only 15.77 percent of the class be unique . be the same -lrb- www.vital-game.com -rrb- and state that these app require flash to run on Android device . hence , the class be basically a wrapper to execute flash app . the cluster with the largest number of class have 1,903 class and be a set of 26 app . all the app be under the News and magazine category , and be develop by one unique developer -lrb- Raycom Media , a tv broadcasting company -rrb- . analyze the class this set of app use show that they reuse different open source package , such as com.github.droidfu , com.j256.ormlite , com.face-book . android , com.bea.xml.stream , and other package . when consider cluster with 100 or more class and at least 100 app , we find the follow seven cluster -lrb- in ascend order by the number of class -rrb- : • 174 app with 124 class , distribute across 20 different category , especially News and magazine -lrb- 27 app -rrb- , business -lrb- 24 -rrb- , communication -lrb- 22 -rrb- , and music and audio -lrb- 22 -rrb- , create by 18 different app developer -lrb- contact website be distinct , which indicate that different app developer create they -rrb- ; appsbuilder -lrb- www.apps-builder.com -rrb- , a web app that allow developer to visually build and generate app without have to program , create 120 app with package name contain the package com.appsbuilder ; • 154 app with 161 class , all under the Books and reference category and create by chinese developer lexun -lrb- these app have be remove from Google Play , likely by Google -rrb- ; • 178 app with 170 class , all under the Books and reference category and be create by another chi-nese developer , 3GQA Dev Team -lrb- again , all the app from this developer be remove from Google Play , likely by Google -rrb- ; • 106 app with 178 class , distribute across 13 different category , especially Sports -lrb- 50 app -rrb- and News and magazine -lrb- 35 -rrb- and create by 38 different app developer , especially what Ho what Ho -lrb- these app be build use appyet -lsb- www.appyet . com -rsb- , which help developer build android app without programming -rrb- ; • 103 app with 235 class , distribute across the games-casual -lrb- 99 app -rrb- and News and magazine -lrb- 4 -rrb- category and create by three different app developer who use package such as jp.co.mediaship . andapp , jp.co.milog , and other -lrb- app from this cluster be remove from the Google Play app store , likely by Google -rrb- ; • 112 app with 262 class , all in the Sports category and create by only one app developer -lrb- Pliabull Technologies -rrb- , integrate different package such as javax.mail , com.sun.mail , com.millennialmedia , com.google.android.apps.analytics , and other package ; and • 232 app with 431 class , distribute across the lifestyle -lrb- 169 app -rrb- , entertainment -lrb- 59 -rrb- , and education -lrb- 4 -rrb- category . the creator of these app have three different identifier , but only one contact website , which again indicate that these app be build by the same app developer Quipper . -lrb- these app be remove from Google Play , likely by Google . -rrb- the app use different package such as com.admob , com.facebook , org.codehaus.jackson , and other . Mobile app that be identical to other mobile app seem to belong to one of the follow four type of framework reuse : reuse of private closed source class own by company for they own purpose ; reuse of private closed source class own by company to develop solution for they client ; reuse of a public , open source collection of library ; or use of automatic mobile app builder . t he fact that software reuse , in the form of in-heritance , class , and library reuse , be prevalent in mobile app of the Google Play app store , mean that app developer reap all the typical reuse benefit , such as improve productivity , higher-quality software and faster time to market ,5,6 although many do not receive a formal training in software engineering .3 it be not clear whether this successful reuse be due to the quality of mobile platform , development tool , app store , or a combination of other factor . possible other factor could be the relatively small size of the mobile app code base and development team , although in recent work , we have find that for these characteristic , mobile app behave identically to small Unix utility application .16 in any case , evidence exist that mobile platform encourage reuse by make frequently reuse app and library a part of the mobile platform itself . for example , this be what happen to the JSON datum format support on the BlackBerry platform .17 user study with app developer be need to understand how they reuse code and whether the way in which they approach reuse be different from developer of nonmobile app . ISRAEL J. MOJICA be a software engineer at McAfee . he research interest include mobile software and empirical software analysis in general . Mojica receive a ms in computer science from Queen 's University , Canada . contact he at Israel _ Mojica@McAfee.com . BRAM ADAMS be a assistant professor at the École Polytechnique de Montréal , where he head the mcis -lrb- maintenance , construction , and Intelligence of Software -rrb- lab . he research interest include software release engineering , software integration , software build system , software modularity , and software maintenance . Adams receive a phd in computer science engineering from Ghent University . he be a organizer of the First International Workshop on Release Engineering -lrb- RELENG 13 -rrb- and be a member of IEEE . contact he at bram.adams @ polymtl.ca . MEIYAPPAN NAGAPPAN be a postdoctoral fellow in the Software analysis and Intelligence Lab -lrb- SAIL -rrb- at Queen 's University , Canada . he research interest include derive solution that encompass all the various stakeholder of software system and use large-scale software engineering datum to also address the concern of software operator , build engineer , and project manager . Nagappan receive a phd in computer science from North Carolina State University . he receive a best paper award at the International Working Conference on Mining Software Repositories -lrb- msr 12 -rrb- . contact he at mei@cs.queensu.ca . STEFFEN DIENST be a phd student in the Chair of Business Information Systems at the University of Leipzig , Germany . he main research topic be use machine-learning technique to help monitor the operation of renewable power plant . other interest range from reverse engineering to functional programming . Dienst receive a m.sc . -lrb- dipl.-inf . -rrb- in computer science from the University of Leipzig . contact he at sdienst@informatik.uni-leipzig.de THORSTEN BERGER be a postdoctoral fellow in the Generative Software Development Lab at the University of Waterloo , Canada . he research interest include model-driven development , variability modeling for software product line and software ecosystem , variability-aware static analysis of source code , and mining software repository . Berger receive a phd -lrb- Dr. rer . nat . -rrb- in computer science from the University of Leipzig . contact he at tberger@gsd.uwaterloo.ca . ah MED E. HASSAN be the NSERC/BlackBerry Software Engineering Chair at the School of Computing at Queen 's University , Canada . he research interest include mining software repository , empirical software engineering , load testing , and log mining . Hassan receive a phd in computer science from the University of Waterloo . he spearhead the creation of the Mining Software Repositories -lrb- msr -rrb- conference and its research community . Hassan also serve on the editorial board of IEEE transaction on Software Engineering , Springer Journal of Empirical Software Engineering , and Springer Journal of Computing . contact he at a hmed@cs.queensu.ca . a b o u t t h e a U t h o r s Mobile app also inherit the disadvantage of reuse , such as increase dependency on the reuse class and a potentially large amount of effort need to integrate a reuse class in the mobile app . for example , a app reuse a low-quality library run a higher risk that bug or incompatibility of the library harm its quality and reliability . more research be need to analyze this negative impact on mobile app in the long term , as well as to analyze other form of reuse such as the general case of framework reuse . reference 1 . B. Womack , `` Google say 700,000 application available for a - droid , '' Bloomberg News , 29 Oct. 2012 ; www.businessweek.com / news/2012 -10 -29 / google-says-700-000-applications-available-for-android-device . 2 . L. Columbus , `` Roundup of Mobile Apps & App Store forecast , 2013 , '' Forbes , 9 June 2013 ; www.forbes.com/sites/louiscolumbus/ 2013/06/09 / roundup-of-mobile-apps-app-store-forecasts-2013 . 3 . a. Craven , A Demographic and Business Model analysis of today 's app Developer , white paper , Gigaom Research , 26 Sept. 2012 ; http://appdevelopersalliance.org/fi les/pages/gigaomapplication developers.pdf . 4 . I.J. Mojica-Ruiz et al. , `` understand reuse in the Android Market , '' Proc . IEEE 20th int ' l Conf . program comprehension -lrb- icpc 12 -rrb- , 2012 , pp. 113-122 . 5 . V.R. Basili , L.C. Briand , and W.L. Melo , `` how Reuse Infl uence Productivity in Object-oriented Systems , '' Comm . ACM , vol . 39 , no. 10 , 1996 , pp. 104-116 . 6 . W.B. Frakes and K. Kang , `` Software Reuse Research : Status and Future , '' IEEE Trans . Software Eng. , vol . 31 , no. 7 , 2005 , pp. 529-536 . 7 . W. Zhou et al. , `` detect repackaged Smartphone application in third-party Android Marketplaces , '' Proc . 2nd ACM Conf . datum and application security and privacy -lrb- codaspy 12 -rrb- , 2012 , pp. 317-326 . 8 . M. Warman , `` fake android app scam cost 28,000 , '' the Telegraph , 24 May 2012 ; www.telegraph.co.uk/technology/ news/9286538/fake-android-app - scam-costs-28000.html . 9 . M.D. McIlroy , `` Mass Produced Software Components , '' Proc . Software Eng . concept and technique , 1969 , pp. 138-155 . 10 . S.W. Ambler , `` a realistic look at Object-Oriented Reuse , '' J. Software Development , vol . 6 , no. 1 , 1998 , pp. 30-38 . 11 . S. Dienst and T. Berger , static analysis of app dependency in Android Bytecode , tech . note , Univ. . Leipzig , 2012 ; www.informatik . uni-leipzig . de / ~ berger/tr/2012-dienst . pdf . 12 . D. Kellogg , `` 40 percent of U.S. Mobile Users Own Smartphones ; 40 percent be Android , '' Nielsen Newswire , 2012 ; www.nielsen.com / us/en/newswire / 2011/40-percent-of - u-s-mobile-users-own - smartphones-40-percent-are-android.html . 13 . J. Davies et al. , `` Software Bertillonage : find the Provenance of a entity , '' Proc . 8th work Conf . Mining Software Repositories -lrb- msr 11 -rrb- , 2011 , pp. 183-192 . 14 . S. Denier and Y.-G . Gueheneuc , `` Mendel : A Model , metric , and rule to Understand Class Hierarchies , '' Proc . 16th ieee int ' l Conf . on program comprehension -lrb- icpc 08 -rrb- , 2008 , pp. 143-152 . 15 . G. Cardino , F. Baruchelli , and a. Valerio , `` the evaluation of framework reusability , '' ACM SIGAPP Applied Computing , vol . 5 , no. 2 , 1997 , pp. 21-27 . 16 . M.D. Syer et al. , `` revisit prior empirical finding for Mobile Apps : a empirical case study on the 15 most Popular Open Source Android Apps , '' Proc . 2013 Conf . Center for Advanced study on Collaborative Research -lrb- CASCON 13 -rrb- , IBM , 2013 , pp. 283-297 . 17 . M.D. Syer et al. , `` explore the development of micro-app : a case study on the BlackBerry and Android Platforms , '' Proc . IEEE 11th Intl. . work Conf . Source Code analysis and manipulation -lrb- scam 11 -rrb- , 2011 , pp. 55-64 . IEEE SOFTWARE call for papers Software Engineering for Internet Computing : Internetware and Beyond submission deadline : 1 June 2014 • publication : January/February 2015 the internet , once a network of network , have become not just the platform of choice for deliver service to increasingly mobile user , but also the connective tissue among people , information , and thing . the newest and most popular computing and application paradigm have be bear on the internet , or at least motivate by it , such as web 2.0 , social networking , mobile internet , cloud computing , the internet of thing , and big datum . this special issue seek article that explore state-of-the-art research and industry practice of software engineering for internet computing . topic of interest include but be not limit to : • software and programming model for dominant and emerge internet-based system such as cloud computing , service computing , social computing , mobile internet , internet-of-thing , and cyber-physical system ; • platform and application framework for internet-based software , such as web-based integration -lrb- for example , rest and json -rrb- , infrastructure provision and deployment -lrb- for example , openstack and Capistrano -rrb- , web-scale datum analytic and content handling -lrb- for example , mongodb and hadoop -rrb- ; • engineering and quality-assurance approach for internet-based software ; • software design model for internet-based software , such as UML , BPM , and Petri net ; • software development process and tool for the internet -lrb- for example , agile development for internet-based software -rrb- , or with the internet -lrb- for example , cloud-based development environment -rrb- ; • technology and human-interaction model and technique in the development of internet-based software ; • migration or integration of legacy software to internet-based software ; and • case study and experience report on one or more of the above aspect in industry practice . question ? for more information about the focus , contact the guest editor : • Tao Xie -lrb- taoxie@illinois.edu -rrb- • Antonia Bertolino -lrb- antonia.bertolino@isti.cnr.it -rrb- • m. Brian Blake -lrb- M.Brian.Blake@miami.edu -rrb- • Pankaj Mehra -lrb- dr.pankaj.mehra@gmail.com -rrb- • Hong Mei -lrb- meih@pku.edu.cn -rrb- submission guideline manuscript must not exceed 4,700 word include figure and table , which count for 200 word each . submission in excess of these limit may be reject without referee . the article we deem within the theme and scope will be peer-reviewed and be subject to editing for magazine style , clarity , organization , and space . we reserve the right to edit the title of all submission . be sure to include the name of the theme or special issue for which you be submit . Articles should have a practical orientation and be write in a style accessible to practitioner . overly complex , purely research-oriented or theoretical treatment be not appropriate . Articles should be novel . IEEE Software do not republish material publish previously in other venue , include other periodical and formal conference/workshop proceedings , whether previous publication be in print or electronic form . full author guideline : www.computer.org/software/author.htm submission detail : software@computer.org submit a article : https://mc.manuscriptcentral.com/sw-c select cs article and column be also available for free at http://computingnow.computer.org . 